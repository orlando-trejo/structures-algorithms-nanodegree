Big O Notation Anaylsis

Task 0: O(1) for each print statement

Explanation on steps: Use the index information of a python list to get information.

Explanation on O(n): One of line of code is necessary for each print statement.

Task 1: O(4n + 3)

Explanation on steps: Made a function to get a list of incoming and answering
numbers from the the calls and texts datasets. Using this function, I created
a combined list of all the numbers. Afterward, I created a set from the combined
list to get a set of unique telephone numbers. I then print the statement with
the count of all the numbers by calculating the length of the set.

Explanation on O(n): The function to get the number is of order n and it is called
four times by the code. Therefore, there is a 4n. In addition to this, there are
three lines of code to create the list of phone numbers, calculate its length,
and print the statement.

Task 2: O(8n + 4)

Explanation of steps: By using the get_numbers function from Task 1, my first
step was to get a set of all of the numbers making and receiving calls. Then, I
initiated a dictionary with all the distinct number as keys and a value of 0
seconds for duration. For each incoming and answering phone number for each entry
in the calls dataset, I added the call duration to the given number. Next, I
identified the number with the maximum value, and used this information to print.

Explanation of O(n): The get_numbers function gets called twice and a set is created
so that is 2n + 1. A dictionary is then initiated resulting in 3n + 2. Then, the
duration values are updated for each call in the log yielding  8n + 2. The last
two lines of code result in 8n + 4.

Task 3 Part A: O(11n + 5)

Explanation of steps: The first step is to get a list of all the numbers
called by numbers from Bangalore. This is done by appending each receiving
number when the incoming number has the area code (080). The next step is to
list all the codes for the numbers in the resulting list. This is done by following
the set of rules of codes for fixed lines, mobiles, and telemarketers using if
statements. Afterward, the list of codes is made into a set to find the unique
and then turned back to a list for sorting in lexicographic order. The set of
ordered codes is then printed out.

Explanation of O(n): Getting a list of all the numbers called by number from
Bangalore requires 3n + 1 due to the initializing the list and each step in the
for loop. Similarly, to get the list of codes increases O(n) to 10n + 2 (7 lines
of code in the for loop and the intializing the codes list). Making a list of
the unique codes (+1) and sorting (+n) it results in 11n + 3. Finally, to print
the statement and each code yields 12n + 4.

Task 3 Part B: O(n + 2)

Explanation of steps and O(n): Using the information from Part A, this task requires
counting (n) how many 80s are in the list of codes and calculating (+1) and printing
(+1) the percentage resulting in n + 2.

Task 4: O(6n + 3)

Explanation of steps: Using the get_numbers function, the first step is to get
sets of all the incoming and receiving numbers for calls and texts. Next, we
can use the properties of sets to subtract out the numbers from the incoming calls
that receive calls, send texts, and receive texts. The remaining set of viable
numbers is then changed into a list and sorted to lexicographic order. Finally,
the statement and numbers are printed.

Explanation of O(n): Making the first 4 sets yields in 4n. Finding the set of
viable numbers (+1), making this set a list (+1), and sorting the list (n) results
in 5n + 2. Printing the statement (+1) and the number (n) yields 6n + 3.
